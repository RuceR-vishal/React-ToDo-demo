{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","console","log","listItem","items","map","x","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","library","add","faTrash","App","handleInput","event","setState","currentItem","Date","now","filteredItems","state","filter","item","updateItem","addItem","preventDefault","newItem","newItems","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TA2BeA,MAvBf,SAAkBC,GACdC,QAAQC,IAAIF,GACZ,IACMG,EADQH,EAAMI,MACGC,KAAI,SAAAC,GACvB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAEE,KAChC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAEE,IAAKG,MAAOL,EAAEM,KACvCC,SAAU,SAACC,GACPd,EAAMe,UAAUD,EAAEE,OAAOL,MAAOL,EAAEE,QAEtC,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UACvBU,QAAS,WAAQjB,EAAMkB,WAAWZ,EAAEE,MACpCW,KAAK,gBAKzB,OACI,6BAAMhB,I,eCjBdiB,IAAQC,IAAIC,KACL,IA4EQC,EA5Ef,YACE,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRwB,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,YAAa,CACXf,KAAMa,EAAMT,OAAOL,MACnBH,IAAKoB,KAAKC,UAhBG,EAqBnBX,WAAa,SAACV,GAEZ,IAAMsB,EAAgB,EAAKC,MAAM3B,MAAM4B,QAAO,SAAAC,GAAI,OAChDA,EAAKzB,MAAQA,KACf,EAAKkB,SAAS,CACZtB,MAAO0B,KA1BQ,EA+BnBI,WAAa,SAACtB,EAAMJ,GAClB,IAAMyB,EAAO,EAAKF,MAAM3B,MACxB6B,EAAK5B,KAAI,SAAAC,GACJA,EAAEE,MAAQA,IACXF,EAAEM,KAAOA,MAGb,EAAKc,SAAS,CACZtB,MAAM6B,KAvCS,EA0CnBE,QAAU,SAACV,GACTA,EAAMW,iBACN,IAAMC,EAAU,EAAKN,MAAMJ,YAE3B,GAAqB,KAAjBU,EAAQzB,KAAa,CACvB,IAAM0B,EAAQ,sBAAO,EAAKP,MAAM3B,OAAlB,CAAyBiC,IACvC,EAAKX,SAAS,CACZtB,MAAOkC,EACPX,YAAa,CACXf,KAAM,GACNJ,IAAK,QAjDX,EAAKuB,MAAQ,CACX3B,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,KAPQ,EADrB,sEA2DI,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa6B,SAAUC,KAAKL,SACnC,2BAAO1B,KAAK,OAAOgC,YAAY,aAC7B9B,MAAO6B,KAAKT,MAAMJ,YAAYf,KAAMC,SAAU2B,KAAKhB,cACrD,4BAAQf,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAUL,MAAOoC,KAAKT,MAAM3B,MAC1Bc,WAAYsB,KAAKtB,WACjBH,UAAWyB,KAAKN,kBAtE1B,GAAyBQ,aCKLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.7e34d417.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItem.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nfunction ListItem(props) {\r\n    console.log(props)\r\n    const items = props.items\r\n    const listItem = items.map(x => {\r\n        return <div className='list' key={x.key}>\r\n            <p>\r\n                <input type='text' id={x.key} value={x.text}\r\n                onChange={(e)=>{\r\n                    props.setUpdate(e.target.value, x.key)\r\n                }}></input>\r\n                <span>\r\n                    <FontAwesomeIcon className=\"faicons\"\r\n                        onClick={() => { props.deleteItem(x.key) }}\r\n                        icon=\"trash\" ></FontAwesomeIcon>\r\n                </span>\r\n            </p>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>{listItem}</div>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n","import './App.css';\nimport React, { Component } from 'react'\nimport ListItem from './ListItem';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        key: ''\n      }\n    }\n  }\n\n  handleInput = (event) => {\n    this.setState({\n      currentItem: {\n        text: event.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  deleteItem = (key) => {\n    debugger\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key)\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n\n  updateItem = (text, key) => {\n    const item = this.state.items\n    item.map(x => { \n      if(x.key === key){\n        x.text = text\n      }\n    })\n    this.setState({\n      items:item\n    })\n  }\n  addItem = (event) => {\n    event.preventDefault();\n    const newItem = this.state.currentItem\n    debugger\n    if (newItem.text !== '') {\n      const newItems = [...this.state.items, newItem]\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder='Enter Text'\n              value={this.state.currentItem.text} onChange={this.handleInput} />\n            <button type='submit'>Add</button>\n          </form>\n        </header>\n        <ListItem items={this.state.items}\n          deleteItem={this.deleteItem}\n          setUpdate={this.updateItem}></ListItem>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}